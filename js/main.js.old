(function($){'use strict';
const BRAND='Todo Terreno PRO', API_BASE_DEFAULT='https://todoterreno.vistapreliminar.com', IDBVER=7;
function getApiBase(){ return (localStorage.getItem('apiBase')||'').trim() || API_BASE_DEFAULT; }
function trimSlash(u){ if(!u) return ''; while(u.endsWith('/')) u=u.slice(0,-1); return u; }
function setBreadcrumbs(items){ const $ol=$('#breadcrumbs').empty(); items.forEach(it=>{ const $li=$('<li/>').addClass('breadcrumb-item'+(it.active?' active':'')); if(it.active){ $li.attr('aria-current','page').text(it.label);} else{$li.append($('<a/>').attr('href',it.href||'#/').text(it.label));} $ol.append($li);}); }
const views={'/':renderLogin,'/pdvs':renderPdvs,'/form':renderForm,'/settings':renderSettings,'/pending':renderPending,'/synced':renderSynced,'/sync':renderSync};
function parseHash(){ const raw=(location.hash||'#/').slice(1); const i=raw.indexOf('?'); const path=i>=0?raw.slice(0,i):raw; const q=i>=0?raw.slice(i+1):''; const query={}; const sp=new URLSearchParams(q); sp.forEach((v,k)=>query[k]=v); return {path:(path||'/'),query}; }
async function navigateTo(hash){ if(hash) location.hash=hash; const {path,query}=parseHash(); const view=views[path]||renderNotFound; const $c=$('#app-main').html('<div class="text-center py-5"><div class="spinner-border spinner-border-sm"></div><div class="mt-2 small text-muted">Cargando…</div></div>'); try{ await view($c,query);}catch(e){ $c.html('<div class="alert alert-danger m-3">Error al renderizar: '+(e.message||e)+'</div>'); console.error(e);}}
$(window).on('hashchange',()=>navigateTo());
const idb=(function(){ const DB='tt_pro_bs_db'; const VER=IDBVER; function open(){ return new Promise((res,rej)=>{ const r=indexedDB.open(DB,VER); r.onupgradeneeded=()=>{ const db=r.result; if(!db.objectStoreNames.contains('responses')){ const s=db.createObjectStore('responses',{keyPath:'localId',autoIncrement:true}); s.createIndex('by_status','status'); s.createIndex('by_pdv','pdvId'); s.createIndex('by_route','routeId'); } if(!db.objectStoreNames.contains('appdata')) db.createObjectStore('appdata',{keyPath:'key'}); if(!db.objectStoreNames.contains('queue')){ const q=db.createObjectStore('queue',{keyPath:'id',autoIncrement:true}); q.createIndex('by_status','status'); } }; r.onsuccess=()=>res(r.result); r.onerror=()=>rej(r.error); }); } async function put(store,obj){ const db=await open(); return new Promise((res,rej)=>{ const tx=db.transaction(store,'readwrite'); tx.objectStore(store).put(obj); tx.oncomplete=()=>res(obj); tx.onerror=()=>rej(tx.error); });} async function add(store,obj){ const db=await open(); return new Promise((res,rej)=>{ const tx=db.transaction(store,'readwrite'); const rr=tx.objectStore(store).add(obj); rr.onsuccess=()=>res(rr.result); rr.onerror=()=>rej(rr.error); });} async function get(store,key){ const db=await open(); return new Promise((res,rej)=>{ const tx=db.transaction(store,'readonly'); const rr=tx.objectStore(store).get(key); rr.onsuccess=()=>res(rr.result||null); rr.onerror=()=>rej(rr.error); });} async function all(store){ const db=await open(); return new Promise((res,rej)=>{ const tx=db.transaction(store,'readonly'); const rr=tx.objectStore(store).getAll(); rr.onsuccess=()=>res(rr.result||[]); rr.onerror=()=>rej(rr.error); });} return {put,add,get,all}; })();
const store={ catalogs:{version:1,fields:[]}, pdvsAll:[], online:navigator.onLine, counts:{pending:0,synced:0} };
function setOnlineUI(){ const $chip=$('#chip-online'); $chip.text(store.online?'Online':'Offline').removeClass('badge-warning badge-success').addClass(store.online?'badge-success':'badge-warning');}
$(window).on('online',()=>{ store.online=true; setOnlineUI(); tryProcessQueue(); });
$(window).on('offline',()=>{ store.online=false; setOnlineUI(); });
async function refreshCounts(){ const allR=await idb.all('responses'); const pending=allR.filter(x=>x.status!=='synced').length; const synced=allR.filter(x=>x.status==='synced').length; store.counts={pending,synced}; $('#chip-pending').text('Pend: '+pending); $('#chip-synced').text('Sync: '+synced); }
async function readJSON(url){ const r=await fetch(url,{cache:'no-store'}); if(!r.ok) throw new Error('HTTP '+r.status); return r.json(); }
async function fetchCatalogs(){ const base=trimSlash(getApiBase()); const jwt=localStorage.getItem('jwt')||''; try{ if(base&&jwt){ const u=base+'/wp-json/myapp/v1/catalogs'; const r=await fetch(u,{headers:{Authorization:'Bearer '+jwt}}); if(r.ok) return r.json(); } }catch(e){} return readJSON('./data/catalogs.json'); }
async function fetchPdvsAll(){ const base=trimSlash(getApiBase()); const jwt=localStorage.getItem('jwt')||''; try{ if(base&&jwt){ const u=base+'/wp-json/myapp/v1/pdvs_all'; const r=await fetch(u,{headers:{Authorization:'Bearer '+jwt}}); if(r.ok) return r.json(); } }catch(e){} return readJSON('./data/pdvs_all.json'); }
async function bootstrapData(){ const catalogs=await fetchCatalogs(); await idb.put('appdata',{key:'catalogs',value:catalogs,ts:Date.now()}); const pdvsAll=await fetchPdvsAll(); await idb.put('appdata',{key:'pdvs_all',value:pdvsAll,ts:Date.now()}); }
async function loadCached(){ const c=await idb.get('appdata','catalogs'); const p=await idb.get('appdata','pdvs_all'); store.catalogs=(c&&c.value)||{version:1,fields:[]}; store.pdvsAll=(p&&p.value)||[]; }
function hasSession(){ return !!localStorage.getItem('jwt') || (localStorage.getItem('sessionActive')==='1'); }
function ensureAuth($c){ if(hasSession()) return true; location.hash='#/'; $c.html(''); return false; }
function renderHeaderTitle(t){ document.title=t+' — '+BRAND; }
(async()=>{ await loadCached(); setOnlineUI(); await refreshCounts(); navigateTo(); })();
function setPDVStatusLocal(pdvId, status){ const idx = store.pdvsAll.findIndex(p=>String(p.id)===String(pdvId)); if(idx>=0){ store.pdvsAll[idx].status = status; idb.put('appdata',{key:'pdvs_all',value:store.pdvsAll,ts:Date.now()}); } }
function summarizeProgress(list){ const total = list.length; const done  = list.filter(p=> p.status==='filled' || p.status==='synced').length; const pct   = total? Math.round((done/total)*100) : 0; return {total, done, pct}; }
async function renderLogin($c){ renderHeaderTitle('Login'); setBreadcrumbs([{label:'Inicio',href:'#/',active:true}]); const offlineHint=(!navigator.onLine && localStorage.getItem('sessionActive')==='1')? '<div class="alert alert-info offline-hint">Sin conexión. Puedes continuar en modo offline con la sesión previa.</div><button class="btn btn-outline-primary btn-block mb-3" id="btn-offline">Entrar en modo offline</button>' : ''; $c.html('<div class="container py-3"><div class="card card-tap"><div class="card-body">'+ '<h5 class="card-title mb-3">Iniciar sesión</h5>'+ offlineHint + '<div class="form-group"><label class="compact-label">Usuario</label><input type="text" class="form-control" id="user"></div>'+ '<div class="form-group"><label class="compact-label">Contraseña</label><input type="password" class="form-control" id="pass"></div>'+ '<div class="small text-muted mb-2">Servidor: '+ getApiBase() +'</div>'+ '<div class="text-danger small mb-2" id="login-error"></div>'+ '<button class="btn btn-primary btn-block" id="btn-login">Entrar</button>'+ '</div></div></div>'); $('#user').val(localStorage.getItem('user')||''); $('#btn-offline').on('click',()=>{ if(localStorage.getItem('sessionActive')==='1'){ location.hash='#/pdvs'; } else { alert('No hay sesión previa.'); } }); $('#btn-login').on('click', async function(){ const base=trimSlash(getApiBase()); const u=$('#user').val().trim(); const p=$('#pass').val().trim(); $('#login-error').text(''); try{ const url=trimSlash(base)+'/wp-json/jwt-auth/v1/token'; const r=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username:u,password:p})}); if(!r.ok) throw new Error('HTTP '+r.status); const j=await r.json(); localStorage.setItem('user',u); localStorage.setItem('jwt',j.token); localStorage.setItem('sessionActive','1'); await bootstrapData(); await loadCached(); location.hash='#/pdvs'; }catch(e){ $('#login-error').text('Error de login/bootstrap: ' + (e.message || e)); } }); }
function statusChip(s){ if(s==='synced') return '<span class="badge status synced">Sincronizado</span>'; if(s==='filled') return '<span class="badge status filled">Lleno</span>'; return '<span class="badge status pending">Pendiente</span>'; }
async function renderPdvs($c, query){ if(!ensureAuth($c)) return; renderHeaderTitle('PDVs'); setBreadcrumbs([{label:'PDVs',href:'#/pdvs',active:true}]); await loadCached(); if(!store.pdvsAll.length){ try{ await bootstrapData(); await loadCached(); }catch(e){} } const selectedRoute = (query.routeId||'').trim(); const routeMap = new Map(); for(const p of store.pdvsAll){ if(p.route && p.route.id){ routeMap.set(String(p.route.id), p.route.title || ('Ruta '+p.route.id)); } } const routeOptions = Array.from(routeMap.entries()).map(([id,title])=>({id,title})).sort((a,b)=> (a.title||'').localeCompare(b.title||'')); const filtered = store.pdvsAll.filter(p=> !selectedRoute || String(p.route && p.route.id)===String(selectedRoute)); const prog = summarizeProgress(filtered); $c.html('<div class="container py-3">'+ '<div class="d-flex align-items-center mb-2">'+ '<h5 class="m-0">Puntos de venta</h5>'+ '<div class="ml-auto d-flex align-items-center">'+ '<label class="mr-2 mb-0 small text-muted">Ruta</label>'+ '<select class="form-control form-control-sm" id="route-filter" style="min-width:220px"></select>'+ '</div>'+ '</div>'+ '<div class="mb-3">'+ '<div class="d-flex align-items-center mb-1"><small class="text-muted mr-2">Progreso</small><span class="badge badge-light">'+prog.done+'/'+prog.total+'</span><span class="ml-auto small text-muted">'+prog.pct+'%</span></div>'+ '<div class="progress thin"><div class="progress-bar" role="progressbar" style="width:'+prog.pct+'%" aria-valuenow="'+prog.pct+'" aria-valuemin="0" aria-valuemax="100"></div></div>'+ '</div>'+ '<div class="list-group" id="pdv-list"></div>'+ '</div>'); const $sel = $('#route-filter'); $sel.append('<option value="">Todas</option>'); routeOptions.forEach(r=> $sel.append('<option value="'+r.id+'">'+r.title+'</option>') ); if(selectedRoute) $sel.val(selectedRoute); function renderRows(){ const $list=$('#pdv-list').empty(); const rows = store.pdvsAll.filter(p=> !selectedRoute || String(p.route && p.route.id)===String(selectedRoute)); if(!rows.length){ $list.append('<div class="list-group-item small text-muted">No hay PDVs para el filtro seleccionado.</div>'); return; } rows.forEach(p=>{ const $i=$('<div/>').addClass('list-group-item list-group-item-action').html( '<div class="d-flex w-100 justify-content-between align-items-start">'+ '<div><div class="font-weight-bold">'+(p.code||'')+' — '+p.name+'</div><div class="small text-muted">'+(p.address||'')+'</div></div>'+ '<div>'+statusChip(p.status||'pending')+'</div>'+ '</div>'+ '<div class="mt-2 d-flex"><a href="#/form?pdvId='+encodeURIComponent(p.id)+'" class="btn btn-sm btn-primary">Abrir</a></div>' ); $list.append($i); }); } renderRows(); $sel.on('change', function(){ const v = $(this).val()||''; const base = '#/pdvs' + (v?('?routeId='+encodeURIComponent(v)):''); location.hash = base; }); }
function buildCameraUI(){ const $w=$('<div class="mb-3"></div>'); $w.append('<div class="form-step-title mb-2">Fotografía (requerida)</div>'); const $wrap=$('<div class="camera-wrap"></div>'); const $frame=$('<div class="camera-frame"></div>'); const $video=$('<video playsinline autoplay muted class="media rounded" style="display:none"></video>'); const $canvas=$('<canvas class="media rounded" style="display:none"></canvas>'); $frame.append($video).append($canvas); $wrap.append($frame); const $controls=$('<div class="camera-controls mt-2 d-flex justify-content-between" style="display:none"></div>'); const $btnShot=$('<button type="button" class="btn btn-primary" style="display:none">Capturar</button>'); const $btnRetake=$('<button type="button" class="btn btn-outline-warning" style="display:none">Repetir</button>'); $controls.append($btnShot,$btnRetake); const $status=$('<div class="small text-muted mt-2">Para iniciar, enciende la cámara.</div>'); const $btnStart=$('<button type="button" class="btn btn-outline-secondary">Encender cámara</button>'); $w.append($btnStart,$wrap,$controls,$status); let stream=null; let track=null; let imageBlob=null; let onCaptureCb=null; function setVisible(on){ $wrap.css('display', on?'block':'none'); $controls.css('display', on?'flex':'none'); if(on){ $video.show(); $canvas.hide(); $btnShot.show().prop('disabled',false); $btnRetake.hide(); } else { $btnShot.hide(); $btnRetake.hide(); $video.hide(); $canvas.hide(); } } async function stopStream(){ try{ if(stream){ stream.getTracks().forEach(t=>t.stop()); } }catch(e){} stream=null; track=null; } async function startCamera(){ try{ $status.text('Solicitando cámara…'); const constraints={video:{facingMode:{ideal:'environment'},width:{min:1280, ideal:3000, max:4096},height:{min:720, ideal:2000, max:4096}}, audio:false}; stream=await navigator.mediaDevices.getUserMedia(constraints); $video[0].srcObject=stream; track=stream.getVideoTracks()[0]; const s=track.getSettings ? track.getSettings() : {}; const w=s.width||'auto', h=s.height||'auto'; $status.text('Cámara lista '+w+'×'+h+'.'); setVisible(true); }catch(e){ $status.text('No se pudo iniciar la cámara: '+(e.message||e)); } } async function capturePhoto(){ try{ imageBlob=null; const vid=$video[0]; const fw=vid.videoWidth, fh=vid.videoHeight; if(!(fw&&fh)) throw new Error('No hay frame de video disponible.'); const targetAR=3/2, frameAR=fw/fh; let sx=0, sy=0, sw=fw, sh=fh; if(frameAR>targetAR){ sw=Math.round(fh*targetAR); sx=Math.floor((fw-sw)/2); } else { sh=Math.round(fw/targetAR); sy=Math.floor((fh-sh)/2); } const c=$canvas[0]; c.width=sw; c.height=sh; const ctx=c.getContext('2d'); ctx.drawImage(vid,sx,sy,sw,sh,0,0,sw,sh); $canvas.show(); $video.hide(); $btnShot.hide(); $btnRetake.show().prop('disabled',false); $status.text('Procesando foto…'); const blob = await new Promise(resolve => c.toBlob(resolve,'image/png')); imageBlob=blob; $status.text('Foto capturada ('+Math.round(imageBlob.size/1024)+' KB). Puedes repetir.'); if(onCaptureCb) try{ onCaptureCb(imageBlob); }catch(e){ console.warn(e); } await stopStream(); }catch(e){ $status.text('Error al capturar: '+(e.message||e)); } } function oncapture(cb){ onCaptureCb=cb; } $btnStart.on('click', startCamera); $btnShot.on('click', capturePhoto); $btnRetake.on('click', async ()=>{ imageBlob=null; $canvas.hide(); $btnRetake.hide(); $status.text('Reiniciando cámara…'); await startCamera(); $status.text('Reintenta la captura.'); }); setVisible(false); return { $root:$w, getBlob:()=>imageBlob, stop:stopStream, start:startCamera, oncapture }; }

function renderFieldCard(f, val, onChange){
  const multiple = (f.type === 'checkbox');
  const $wrap = $('<div class="mb-3 w-100"></div>');
  $wrap.append('<div class="form-step-title mb-2">'+f.label+(f.required?' *':'')+'</div>');

  (f.options || []).forEach((opt, i) => {
    const id = f.id + '-' + i;
    const checked = multiple
      ? (Array.isArray(val) && val.includes(opt.value))
      : (val === opt.value);

    // EXACTO a tu referencia: <label> <input .card-input-element.d-none> <div.card ...>
    const $label = $('<label class="'+(i>0 ? 'mt-3 ' : '')+'"></label>');

    const $input = $('<input>')
      .attr('type', multiple ? 'checkbox' : 'radio')
      .attr('name', f.id)
      .addClass('card-input-element d-none')
      .attr('id', id)
      .val(opt.value);

    if (checked) $input.prop('checked', true);

    const $card = $('<div class="card card-body bg-light d-flex flex-row justify-content-between align-items-center"></div>');
    const $title = $('<div></div>').text(opt.label);

    $card.append($title);
    $label.append($input).append($card);
    $wrap.append($label);
  });

  // Maneja cambios para una/múltiples selecciones
  $wrap.on('change', 'input.card-input-element', function(){
    if (multiple) {
      const arr = [];
      $wrap.find('input.card-input-element:checked').each(function(){ arr.push(this.value); });
      onChange(arr);
    } else {
      onChange(this.value);
    }
  });

  return $wrap;
}
             
async function renderForm($c,query){ if(!ensureAuth($c)) return; renderHeaderTitle('Formulario'); const pdvId=query.pdvId||''; await loadCached(); const fields=store.catalogs.fields||[]; const pdv = (store.pdvsAll||[]).find(x=> String(x.id)===String(pdvId)); const routeId = pdv && pdv.route ? pdv.route.id : ''; let answers={}; let step=0; const cam=buildCameraUI(); let photoBlob=null; const total=fields.length+2; setBreadcrumbs([{label:'PDVs',href:'#/pdvs'},{label:(pdv?(pdv.code+' — '+pdv.name):'Formulario'),active:true}]); $c.html('<div class="container py-3"><div class="d-flex align-items-center mb-2"><button class="btn btn-outline-secondary btn-sm" id="btn-back">← Volver</button><div class="ml-auto"><span class="badge badge-primary" id="step-label">1/'+total+'</span></div></div><div class="progress thin mb-3"><div class="progress-bar" id="progressbar" style="width:0%"></div></div><div id="form-body"></div><div class="sticky-actions mt-3"><button class="btn btn-primary btn-block" id="btn-next">Siguiente</button></div></div>'); function updateStepUI(){ const pct=Math.round((step/(total-1))*100); $('#progressbar').css('width',pct+'%'); $('#step-label').text((step+1)+'/'+total); const onCameraStep = (step===fields.length); $('#btn-next').text(step===(total-1)?'Finalizar':'Siguiente'); $('#btn-next').prop('disabled', onCameraStep && !photoBlob);} function renderField(f,val,onChange){ if(f.type==='radio' || f.type==='checkbox'){ return renderFieldCard(f,val,onChange); } if(f.type==='textarea'){ const $ta=$('<textarea class="form-control" rows="5"></textarea>').val(val||''); $ta.on('input',()=>onChange($ta.val())); return $('<div class="mb-3"></div>').append('<div class="form-step-title mb-2">'+f.label+'</div>').append($ta); } const $in=$('<input type="text" class="form-control">').val(val||''); $in.on('input',()=>onChange($in.val())); return $('<div class="mb-3"></div>').append('<div class="form-step-title mb-2">'+f.label+'</div>').append($in); } function geoUI(){ const $w=$('<div class="mb-3"></div>'); const $b=$('<button class="btn btn-outline-primary btn-block" type="button">Obtener ubicación</button>'); const $o=$('<div class="small text-muted mt-2">Aún sin datos</div>'); $b.on('click',()=>{ navigator.geolocation.getCurrentPosition((pos)=>{ const lat=pos.coords.latitude.toFixed(6); const lng=pos.coords.longitude.toFixed(6); const acc=Math.round(pos.coords.accuracy); $o.text('Lat: '+lat+', Lng: '+lng+', Precisión: '+acc+' m'); }, (err)=>{ $o.text('Error: '+(err.message||err)); }, {enableHighAccuracy:true,timeout:15000}); }); $w.append($b).append($o); return $w; } async function mount(){ const $b=$('#form-body').empty(); if(step<fields.length){ try{ await cam.stop(); }catch(e){} const f=fields[step]; const val=answers[f.id]; $b.append(renderField(f,val,(v)=>{answers[f.id]=v;})); } else if(step===fields.length){ $b.append(cam.$root); cam.oncapture(function(blob){ photoBlob=blob; updateStepUI(); }); } else { try{ await cam.stop(); }catch(e){} $b.append('<div class="form-step-title mb-2">Ubicación</div>').append(geoUI()); } updateStepUI(); } async function finalize(){ const payload={ pdvId:pdvId, routeId:routeId, answers:answers, photo: photoBlob?{size:photoBlob.size,mime:photoBlob.type}:null, status:'filled', createdAt:Date.now(), updatedAt:Date.now(), dedupeKey:(pdvId+'-'+Date.now()) }; await idb.add('responses',payload); await idb.add('queue',{type:'response',status:'queued',attempts:0,nextAt:Date.now(),payload:payload}); setPDVStatusLocal(pdvId,'filled'); await refreshCounts(); try{ await cam.stop(); }catch(e){} alert('Guardado local ✔️'); location.hash='#/pdvs'; } $('#app-main').off('click','#btn-next').on('click','#btn-next', async function(){ if(step===fields.length && !photoBlob){ alert('Primero captura una foto.'); return; } if(step===(total-1)){ await finalize(); return; } step++; mount(); }); $('#app-main').off('click','#btn-back').on('click','#btn-back',async function(){ if(step>0){ step--; await mount(); } else { try{ await cam.stop(); }catch(e){} location.hash='#/pdvs'; } }); mount(); }
async function tryProcessQueue(){ if(!navigator.onLine) return; const qs=await idb.all('queue'); const pend=qs.filter(q=>q.status!=='done'&&q.nextAt<=Date.now()); for(const q of pend){ q.status='sending'; await idb.put('queue',q); try{ const base=trimSlash(getApiBase()); const tok=(localStorage.getItem('jwt')||''); const url=base+'/wp-json/myapp/v1/responses/bulk'; const payload=[q.payload].map(it=>({ pdv_id:it.pdvId, answers:it.answers, created_at:it.createdAt, updated_at:it.updatedAt, dedupeKey:it.dedupeKey })); const r=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json','Authorization':'Bearer '+tok},body:JSON.stringify(payload)}); if(!r.ok) throw new Error('HTTP '+r.status); q.status='done'; await idb.put('queue',q); const allR=await idb.all('responses'); const m=allR.find(x=>x.dedupeKey===q.payload.dedupeKey); if(m){ m.status='synced'; await idb.put('responses',m); } setPDVStatusLocal(q.payload.pdvId,'synced'); }catch(e){ q.attempts=(q.attempts||0)+1; q.status='failed'; q.nextAt=Date.now()+Math.min(300000, 3000*(2**q.attempts)); q.lastError=e.message||String(e); await idb.put('queue',q); } } await refreshCounts(); }
setInterval(()=>{ tryProcessQueue(); },4000);
async function renderPending($c){ setBreadcrumbs([{label:'PDVs',href:'#/pdvs'},{label:'Pendientes',active:true}]); const rows=(await idb.all('responses')).filter(x=>x.status!=='synced'); $c.html('<div class="container py-3"><h5>Pendientes</h5><div id="list" class="list-group"></div></div>'); const $list=$('#list'); if(!rows.length){ $list.html('<div class="text-muted small">No hay registros.</div>'); return; } rows.forEach(r=>{ $list.append('<div class="list-group-item d-flex justify-content-between"><div>PDV: '+r.pdvId+'</div><small>'+new Date(r.createdAt).toLocaleString()+'</small></div>'); }); }
async function renderSynced($c){ setBreadcrumbs([{label:'PDVs',href:'#/pdvs'},{label:'Sincronizados',active:true}]); const rows=(await idb.all('responses')).filter(x=>x.status==='synced'); $c.html('<div class="container py-3"><h5>Sincronizados</h5><div id="list" class="list-group"></div></div>'); const $list=$('#list'); if(!rows.length){ $list.html('<div class="text-muted small">No hay registros.</div>'); return; } rows.forEach(r=>{ $list.append('<div class="list-group-item d-flex justify-content-between"><div>PDV: '+r.pdvId+'</div><small>'+new Date(r.createdAt).toLocaleString()+'</small></div>'); }); }
async function renderSync($c){ setBreadcrumbs([{label:'PDVs',href:'#/pdvs'},{label:'Sincronización',active:true}]); $c.html('<div class="container py-3"><div class="d-flex align-items-center mb-2"><h5 class="m-0">Sincronización</h5><button class="btn btn-primary ml-auto" id="btn-sync">Sincronizar ahora</button></div><div class="card card-tap"><div class="card-body"><pre id="log" class="codebox mb-0" style="max-height:300px; overflow:auto"></pre></div></div></div>'); const $log=$('#log'); const log=(t)=>{ $log.text($log.text()+t+'\n'); $log.scrollTop=$log[0].scrollHeight; }; $('#btn-sync').on('click', async function(){ log('Procesando cola…'); await tryProcessQueue(); log('Listo.'); }); }
async function renderSettings($c){ const home=hasSession()?'#/pdvs':'#/'; setBreadcrumbs([{label:'Inicio',href:home},{label:'Ajustes',active:true}]); $c.html('<div class="container py-3"><h5>Ajustes</h5><div class="card card-tap mb-3"><div class="card-body">'+ '<div class="form-group"><label>API Base</label><input type="url" id="opt-api" class="form-control" placeholder="https://todoterreno.vistapreliminar.com"><small class="form-text text-muted">Edita solo si cambias de dominio.</small></div>'+ '<div class="d-flex flex-wrap">'+ '<button class="btn btn-outline-success mr-2 mb-2" id="btn-save-api">Guardar API Base</button>'+ '<button class="btn btn-outline-secondary mr-2 mb-2" id="btn-reset-api">Restablecer a predeterminado</button>'+ '<button class="btn btn-outline-secondary mr-2 mb-2" id="btn-update-app">Actualizar app</button>'+ '<button class="btn btn-outline-danger mr-2 mb-2" id="btn-clear-cache">Limpiar caché</button>'+ '<button class="btn btn-outline-warning mr-2 mb-2" id="btn-clear-idb">Borrar base local</button>'+ '<button class="btn btn-outline-primary mr-2 mb-2" id="btn-go-home">Ir al inicio</button>'+ '</div></div></div></div>'); $('#opt-api').val(localStorage.getItem('apiBase')||'https://todoterreno.vistapreliminar.com'); $('#btn-save-api').on('click', function(){ const v=($('#opt-api').val()||'').trim(); if(!v) return alert('Ingresa una URL'); localStorage.setItem('apiBase', v); alert('Guardado.'); }); $('#btn-reset-api').on('click', function(){ localStorage.removeItem('apiBase'); $('#opt-api').val('https://todoterreno.vistapreliminar.com'); alert('Restablecido.'); }); $('#btn-update-app').on('click', async function(){ const reg=await navigator.serviceWorker.getRegistration('./'); if(reg){ await reg.update(); if(reg.waiting) reg.waiting.postMessage('SKIP_WAITING'); } alert('Actualizando… cierra/abre la PWA si no ves cambios.'); }); $('#btn-clear-cache').on('click', async function(){ if(window.caches){ const ks=await caches.keys(); for(const k of ks) await caches.delete(k);} alert('Caché limpiada. Recarga la app.'); }); $('#btn-clear-idb').on('click', async function(){ try{ await new Promise(r=>{ const req=indexedDB.deleteDatabase('tt_pro_bs_db'); req.onsuccess=req.onerror=req.onblocked=()=>r(); }); alert('Base local borrada. Recarga la app.'); }catch(e){ alert('Error: '+e.message); } }); $('#btn-go-home').on('click', function(){ location.hash=home; }); }
async function renderNotFound($c){ setBreadcrumbs([{label:'Inicio',href:'#/',active:true}]); $c.html('<div class="container py-4"><div class="alert alert-warning">Página no encontrada.</div></div>'); }
$(document).on('click','#btn-settings', function(){ location.hash='#/settings'; });
$(document).on('click','#btn-logout', function(){ localStorage.removeItem('jwt'); localStorage.removeItem('sessionActive'); location.hash='#/'; });
$(document).on('click','#btn-sync-footer', function(){ location.hash='#/sync'; });
$(function(){ setBreadcrumbs([{label:'Inicio',href:'#/',active:true}]); });
})(jQuery);